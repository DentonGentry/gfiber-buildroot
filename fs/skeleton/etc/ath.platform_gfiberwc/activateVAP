#!/bin/sh
####################################################################################
##
## set_random_ssid 
##
## Set a random SSID for the given interface
## arguments
## $1 - APNAME - name of the interface eg. ath0
## 
set_random_ssid() {
    apname=$1
    apindex=$2

    if [ "${apindex}" != "0" ]; then
        vapident="_$apindex"
    else
        vapident=""
    fi
       
    RAND_SSID="AP_SSID$vapident"
    eval RAND_SSID=\$$RAND_SSID
    
    if [ "${RANDOM_SSID}" -eq "1" ]; then
        TEMP_SSID=$RAND_SSID:`ifconfig $apname | grep HWaddr | cut -d ' ' -f 11 | cut -d ":" -f 4-`
        TEMP_SSID_1=`echo $TEMP_SSID | cut -d ":" -f 1`
        TEMP_SSID_2=`echo $TEMP_SSID | cut -d ":" -f 2`
        TEMP_SSID_3=`echo $TEMP_SSID | cut -d ":" -f 3`
        TEMP_SSID_4=`echo $TEMP_SSID | cut -d ":" -f 4`
        AP_RANDOM_SSID="$TEMP_SSID_1$TEMP_SSID_2$TEMP_SSID_3$TEMP_SSID_4"
    else
        AP_RANDOM_SSID=$RAND_SSID
    fi
    cfg -a AP_RANDOM_SSID$vapident=$AP_RANDOM_SSID
    

}
#end set_random_ssid

####################################################################
## activateVAP
##
## This script is used to activate a VAP that was created earlier.
## Activation involves bringing the interface up, associating with
## a bridge, and configuring the security mode.  The VAP MUST EXIST
## prior to calling the activate script.
##
## The form of the command is
##
## activateVAP <vap> <BR> <Security> <SEC Args> <WSC>  <VAP_TIE>
##
## Where
##      vap:    Vap ID (e.g. ath0)
##       BR:    Bridge to join (or - if not bridged)
## Security:    Security mode (WEP,WPA,WSC,NONE)
## Sec Args:    File containing security configuration.  For WPA this is the hostapd
##              conf file.  For WEP this is a list of iwconfig commands setting the
##              keys.
##
## Examples:
##   Open Access Point
##      activateVAP ath0 br0 NONE
##   WPA Access Point
##      activateVAP ath1 br0 WPA wpa2-psk.conf
##   WEP Station
##      activateVAP ath0 br0 WEP wep.conf
##
###################################################################

. /etc/ath/apcfg

if [ "${1}" = "" ]; then
    echo "activateVAP usage"
    echo "activateVAP VAPid:Radio bridge Security Security_file"
    echo
    echo "vapid: e.g. ath0"
    echo "bridge:  Name of bridge to add to,(typically br0)"
    echo "Security: [ WPA | WEP | WSC | NONE ]"
    echo "Security_file: Name of file in /etc/ath containing security config"
    echo
    exit
fi

BRIDGE=$2
SECMODE=$3
SECFILE=$4
WSCMODE=$5
VAPTIE=$6

APNAME=`echo $1 | cut -d ':' -f 1`
RADIO=`echo $1 | cut -d ':' -f 2`

if [ "$RADIO" = "" ]; then
    RADIO="0"
fi

KVER=`uname -r`
MODULE_PATH=/lib/modules/$KVER/net
MODE=`iwconfig ${APNAME} | grep "Mode:Master"`

if [ "${WSCMODE}" = "1" -o "${WSCMODE}" = "2" ]; then
    if [ "${SECMODE}" != "WPA" ]; then
        echo "*** WARNING: WPS is enabled with No/Incorrect Security settings !! ***"
    fi
fi

if [ "${AP_HIDESSID}" = "1" ]; then
    echo "*** WARNING: invalid config WPS is enabled with hidden ssid !! ***"
    echo "*** WARNING: WPS is disabled  ***"
    WSCMODE=0
fi

if [ "${WSCMODE}" = "1" ]; then
    if [ "${SECMODE}" = "WPA" ]; then
        echo "*** WARNING: WPA is Configured with WPS MOVING TO CONFIGURE STATE  !! ***"
        cfg -a WPS_ENABLE=2
        WSCMODE=2
    fi
fi
##
## Create an AP index, based on the VAP (ath) number
##

APINDEX=`echo ${APNAME}| sed -e 's/[a-z]//g'`

if [ "$APINDEX" != "0" ]; then
    APINDEX=`expr ${APINDEX} + 1`
fi

##
## First, let us see if the indicated VAP exists.  If not, it must be created
##

VAPLIST=`iwconfig | grep ${APNAME} | cut -b 1-4`

if [ "${VAPLIST}" = "" ]; then
    echo "VAP ${APNAME} must be created first!! (use makeVAP)"
    exit
fi

##
## Must determine if the scan modules need to be loaded.  Remember, only once!
## This is in station mode if the MODE value is blank
##

STATIONSCAN=`lsmod | grep wlan_scan_sta`

if [ "${MODE}" = "" -a "${STATIONSCAN}" = "" ]; then
    
    #
    # Check for a specific MAC address that is specified.  Only valid for stations
    #

    if [ "${AP_REQ_MAC}" != "" ]; then
        iwconfig $APNAME ap $AP_REQ_MAC
    fi
fi

#
# Bring the interface up at this point!!
# configure bridge, or set an IP address for the WLAN interface
#

if [ "${BRIDGE}" != "none" -a "${BRIDGE}" != "-" ]; then
    ifconfig ${APNAME} up
    brctl addif ${BRIDGE} ${APNAME}
    echo -e "\tinterface ${APNAME}" >> /tmp/${BRIDGE}
    #
    # Add the arping command to ensure all nodes are updated on the network!
    #
    
    arping -U -c 1 -I ${BRIDGE} $AP_IPADDR

else
    ifconfig ${APNAME} up ${WAN_IPADDR}
fi

if [ "$APINDEX" != "0" ]; then
  APIDX=`expr ${APINDEX} - 1`
  APWPA="AP_WPA_${APINDEX}"
  APCYP="AP_CYPHER_${APINDEX}"
else
  APIDX=0
  APWPA="AP_WPA"
  APCYP="AP_CYPHER"
fi

eval VAL_APWPA=\$$APWPA
eval VAL_APCYP=\$$APCYP

MAIN_STARTMODE=`echo ${AP_STARTMODE} | cut -f 1 -d '-'`
SUB_STARTMODE=`echo ${AP_STARTMODE} | cut -f 2 -d '-'`

echo "main startmode: ${MAIN_STARTMODE}"
echo "sub startmode: ${SUB_STARTMODE}"
    
if [ "${SECMODE}" = "WPA" ]; then
  #
  # WPA now processes all WPA sub modes
  # Here the file is "translated" from the template.
  #
  #
  # This is the method using the "translation" mode of cgiMain to
  # create an appropriate security file for PSK or Enterprise mode
  #
  cfg -t${APINDEX} /etc/ath/${SECFILE}.ap_bss ${APNAME} > /tmp/sec${APNAME}

  echo "/tmp/sec${APNAME} \c\h" >> /tmp/conf_filename
fi
