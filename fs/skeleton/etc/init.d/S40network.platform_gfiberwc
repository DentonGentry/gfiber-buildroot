#!/bin/sh
. /etc/utils.sh

set_mac_from_hnvram()
{
  local DEV="$1"
  local VAR_NAME="$2"
  if [ -h /sys/class/net/$DEV ]; then
    local addr="$(hnvram -qr "$VAR_NAME")"
    if [ -n "$addr" ]; then
      echo "Setting $DEV mac address to $addr"
      ip link set dev $DEV down
      ip link set dev $DEV address "$addr"
      ip link set dev $DEV up
    else
      echo "$DEV: sysvar $VAR_NAME not found"
    fi
  fi
}

case "$1" in
  start)
    if [ "$(kernopt wifical)" != "1" ]; then
      modprobe -a ath9k 2>/dev/null

      # Enable wifi beacon and fatal debug logging.
      if [ -e /sys/module/ath9k/parameters/debug ]; then
        echo 0x00004400 >/sys/module/ath9k/parameters/debug
      fi
    fi

    # if the file exists and it isn't empty
    if [ -s /config/tcp_congestion_control ]; then
      algorithm=$(cat /config/tcp_congestion_control)
      echo "Registering congestion control algorithm $algorithm"
      sysctl net.ipv4.tcp_congestion_control=$algorithm
    fi

    # create a default resolv.conf and /etc/hosts in case DHCP doesn't.
    # (this is always true if using nfsroot).
    # 8.8.8.8 and 8.8.4.4 are well-known Google public DNS servers
    # that can be used from anywhere, so it makes a good place to start.
    # DHCP will just overwrite this file when it's ready to go.
    if [ ! -r /etc/resolv.conf ]; then
      #TODO(apenwarr): add IPv6 DNS once our uClibc can handle it.
      (echo 'nameserver 8.8.8.8';
       echo 'nameserver 8.8.4.4') >/etc/resolv.conf
    fi
    if [ ! -r /etc/hosts ]; then
      echo "127.0.0.1 localhost $(hostname)" >/etc/hosts
    fi

    # Configure dhclient with the right hostname etc.
    setup-dhclient

    # configure loopback
    ifup lo

    set_mac_from_hnvram wan0 MAC_ADDR1
    set_mac_from_hnvram lan0 MAC_ADDR2
    set_mac_from_hnvram wlan0 MAC_ADDR_WIFI

    echo -n "Creating bridge... "
    brctl addbr br0 || exit 1
    brctl setfd br0 1
    brctl stp br0 on
    # Storage and network boxes should have higher precedence (lower value)
    #  when choosing the root of the spanning tree.
    #  The default in Linux is 0x8000.
    brctl setbridgeprio br0 0x7980
    for i in lan0; do
      [ -e /sys/class/net/$i/address ] && \
        ip link set br0 address \
        $(cat /sys/class/net/$i/address) && \
        break
    done
    echo "done"
    ip link set br0 up
    ip link set br0 up  # kernel 3.2.26 bug: fails the first time

    echo "Adding interfaces... "
    # Move any existing network info from primary network interfaces to
    # the bridge.
    for x in \
        /sys/class/net/lan0 \
        /sys/class/net/wlan[0-9]; do
      x=${x#/sys/class/net/}
      echo "Adding interface $x..."
      ip link set $x up &&
      ip -o -f inet addr show $x |
      while read a b c ip d brd junk; do
        ip addr add $ip broadcast $brd dev br0
      done &&
      brctl addif br0 $x &&
      ip -o -f inet route list dev $x |
      while read dst routeinfo; do
        if [ "$dst" = "default" ]; then
          echo "Moving route '$dst' from $x to br0" &&
          ip route del dev $x $dst $routeinfo &&
          ip route add dev br0 $dst $routeinfo
        fi
      done &&
      ip -o -f inet addr show $x |
      while read a b c ip junk; do
        ip addr del $ip dev $x
      done
    done
    echo "Adding RFC2365 multicast route..."
    ip route add 239.0.0.0/8 dev br0
    kernopt ip |
    while IFS=: read ip serverip gatewayip netmask hostname ifc junk; do
      # $ip should be already setup by simpleramfs.
      # TODO(apenwarr): simpleramfs should set up $gatewayip too.
      #  But right now its included networking commands are too limited.
      if [ -n "$gatewayip" ]; then
        echo "IP: adding default gateway '$gatewayip'"
        if experiment BigInitRwnd; then
          initrwnd='initrwnd 1000'
        else
          initrwnd=
        fi
        ip route add default via "$gatewayip" $initrwnd
      fi
    done
    echo "Bringing up the bridge..."
    ip link set br0 up  # kernel 3.16 behavior, sometimes br0 does not come up.
    ifup br0

    if [ -e /sys/class/net/wan0 ]; then
      echo "Bringing up the WAN port..."
      ip link add link wan0 name wan0.2 type vlan id 2
      sysctl net.ipv4.conf.all.forwarding=1
      sysctl net.ipv6.conf.all.forwarding=1
      sysctl net.ipv6.conf.wan0.accept_ra=2
      sysctl net.ipv6.conf.wan0/2.accept_ra=2
      ifup wan0
      ifup wan0.2

      # set the class priority to 802.1p bit mapping.  We don't want
      # pbit=0,1 ever, so force into 2.
      vconfig set_egress_map wan0.2 0 2
      vconfig set_egress_map wan0.2 1 2
      for prio in 2 3 4 5 6 7; do
        vconfig set_egress_map wan0.2 $prio $prio >/dev/null 2>&1
      done
    fi

    ;;
  stop)
    if [ ! -e /tmp/NFS ]; then
      if [ -e /sys/class/net/wan0 ]; then
        echo "Shutting down the WAN port..."
        ifdown wan0
        ifdown wan0.2
        ip link del wan0.2
      fi
      for x in $(ls /sys/class/net); do
        if [ -n /sys/class/net/$x/bridge ]; then
          ifdown $x
          echo "Shutting down $x interface"
        fi
        if [ -e /sys/class/net/$x/device ]; then
          brctl delif br0 $x
        fi
      done
      ifdown br0
    fi
    [ -e /sys/class/net/br0 ] && brctl delbr br0
    ;;
  restart|reload)
    "$0" stop
    "$0" start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac
