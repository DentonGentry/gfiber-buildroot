#!/bin/sh
case "$1" in
  start)
    # create a default resolv.conf in case DHCP doesn't provide one
    # (this is always true if using nfsroot).
    # 8.8.8.8 and 8.8.4.4 are well-known Google public DNS servers
    # that can be used from anywhere, so it makes a good place to start.
    # DHCP will just overwrite this file when it's ready to go.
    if [ ! -r /etc/resolv.conf ]; then
      #TODO(apenwarr): add IPv6 DNS once our uClibc can handle it.
      (echo 'nameserver 8.8.8.8';
       echo 'nameserver 8.8.4.4') >/etc/resolv.conf
    fi

    # Configure dhclient with the right hostname etc.
    setup-dhclient

    # configure loopback
    ifup lo
    echo -n "Creating bridge... "
    brctl addbr br0 || exit 1
    brctl setfd br0 1
    brctl stp br0 on
    # If fat bruno, set bridge priority to 0x7990 so that
    # it will be used as the root for the spanning tree.
    if is-storage-box; then
      brctl setbridgeprio br0 0x7990
    fi
    [ -e /sys/class/net/eth0/address ] && \
      ip link set br0 address \
      $(cat /sys/class/net/eth0/address)
    echo "done"
    ip link set br0 up

    # VLAN tag for MoCA interface
    ip link add link eth1 name eth1.0 type vlan id 0
    # SO_PRIORITY -> 802.1p mapping
    for prio in 0 1 2 3 4 5 6 7; do
      vconfig set_egress_map eth1.0 $prio $prio >/dev/null 2>&1
    done

    echo "Adding interfaces... "
    # set up networking if we are not on an NFS rootfs
    for x in $(ls /sys/class/net); do
      [ $x = "lo" ] && continue
      [ $x = "br0" ] && continue
      echo "Adding interface $x..."
      ip link set $x up &&
      ip -o -f inet addr show $x |
      while read a b c ip d brd junk; do
        ip addr add $ip broadcast $brd dev br0
      done &&
      if [ -e /sys/class/net/$x/device ]; then
        if [ $x = eth1 ]; then
          x=eth1.0
        fi
        brctl addif br0 $x
      fi &&
      ip -o -f inet route list dev $x |
      while read dst routeinfo; do
        if [ "$dst" = "default" ]; then
          echo "Moving route '$dst' from $x to br0" &&
          ip route del dev $x $dst $routeinfo &&
          ip route add dev br0 $dst $routeinfo
        fi
      done &&
      ip -o -f inet addr show $x |
      while read a b c ip junk; do
        ip addr del $ip dev $x
      done
    done
    if [ ! -e /tmp/NFS ]; then
      echo "Bringing up the bridge..."
      ifup br0
    else
      # nfsroot; network is already up.  ifup would normally do the following.
      upload-logs-now
    fi

    if [ -e /dev/bmoca0 ]; then
      echo "distribute IRQ handling between cores"
      # IRQ 62 (Serial port) & 31 (MoCA) on CPU 1.
      echo 1 >/proc/irq/62/smp_affinity
      echo 1 >/proc/irq/31/smp_affinity
      # Ethernet interrupts (18-21) on CPU 2.
      echo 2 >/proc/irq/18/smp_affinity
      echo 2 >/proc/irq/19/smp_affinity
      echo 2 >/proc/irq/20/smp_affinity
      echo 2 >/proc/irq/21/smp_affinity
      echo "mocacfg boot..."
      mkdir -p /tmp/moca
      mocacfg boot &  # a bit slow, so don't bother waiting
    fi

    if [ -d /sys/class/net/eth2 ]; then
      # Partial fix for "micro-stuttering" seen in video playback.
      # Wifi driver needs to be on cpu1 and video on cpu0 so that wifi
      # can't lock out scheduling of the video player.
      echo "forcing wifi onto cpu1"
      echo 2 >/proc/irq/34/smp_affinity
    fi
    ;;
  stop)
    if [ ! -e /tmp/NFS ]; then
      for x in $(ls /sys/class/net); do
        if [ -n /sys/class/net/$x/bridge ]; then
          ifdown $x
          echo "Shutting down $x interface"
        fi
        if [ -e /sys/class/net/$x/device ]; then
          brctl delif br0 $x
        fi
      done
      ifdown br0
      # Kill mocad and mocactl
      if [ -e /dev/bmoca0 ]; then
        echo -n "mocacfg kill"
        mocacfg kill
        echo "done"
      fi
    fi
    if ip link show dev br0 2>&1 > /dev/null; then
      brctl delbr br0
    fi
    ;;
  restart|reload)
    "$0" stop
    "$0" start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac
