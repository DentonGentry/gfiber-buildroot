#!/bin/sh
MODULE_PATH=/usr/lib/modules
. /etc/utils.sh

# RwFirmware mount /rw/firmware over /lib/firmware
# allows developers to test new mrvl firmware
check_rwfw_experiment()
{
  register_experiment RwFirmware

  if experiment RwFirmware; then
    local src=/lib/firmware
    local dst=/rw/firmware
    if [ ! -d "$dst" ]; then
      echo "RwFirmware: copying $src to $dst"
      mkdir -p "$dst"
      tar cf - -C "$src" . | tar xf - -C "$dst"
    fi
    if ! touch "$src/this_is_rw" 2>/dev/null; then
      echo "RwFirmware: mounting writable $dst on $src"
      mount -o bind "$dst" "$src"
    fi
  fi
}

check_rwfw_experiment

start()
{
  register_experiment SkipBluetoothWifi
  register_experiment BluetoothLast

  if experiment SkipBluetoothWifi; then
    exit 0
  fi
  done=/tmp/btlast_$(basename $0).done
  if experiment BluetoothLast && [ ! -f "$done" ]; then
    : > "$done"
    echo "$0: skipping start due to BluetoothLast experiment."
    exit 0
  fi

  [ -e "$MODULE_PATH/wl.ko" ] && insmod "$MODULE_PATH/wl.ko"

  # Set up BT, if present
  if is-tv-box; then
    BT_MAC=$(hnvram -qr MAC_ADDR_BT)
    if [ -z "$BT_MAC" ]; then
      MAC=$(hnvram -qr MAC_ADDR)
      if [ -z "$MAC" ]; then
        echo "$0: ERROR: TV Box has no MAC_ADDR nor MAC_ADDR_BT"
        exit 1
      fi
      BT_MAC=$(mac_addr_increment "$MAC" 2)
    fi
    BT_MAC=$(echo "$BT_MAC" | sed 's/./\U&/g')
    echo "$BT_MAC" >/tmp/btmacaddress
  fi

  if ! is-bluez-platform; then
    [ -e "$MODULE_PATH/btusb.ko" ] && insmod "$MODULE_PATH/btusb.ko"
    [ -e "$MODULE_PATH/bthid.ko" ] && insmod "$MODULE_PATH/bthid.ko"
  elif [ "$(kernopt wifical)" = "1" ]; then
    # If we're trying to calibrate Wifi/BT, loading
    # the production driver disrupts the process, and we need the "primary
    # kernel" bluetooth core.
    insmod /lib/modules/$(uname -r)/kernel/net/bluetooth/bluetooth.ko
    modprobe -a bluetooth
  else  # Not trying to calibrate
    modprobe -a compat

    # If a backports bluetooth module is present, use it.
    backport="/lib/modules/$(uname -r)/backports/net/bluetooth/bluetooth.ko"
    [ -e "$backport" ] && insmod "$backport"

    modprobe -a bluetooth hidp hid-gfrm uhid
    modprobe btmrvl bdaddr_base="$BT_MAC"
    modprobe btmrvl_sdio
    if [ -e "/lib/modules/$(uname -r)/kernel/drivers/bluetooth/btbcm.ko" ]; then
      modprobe btbcm bdaddr_base="$BT_MAC"
      modprobe btusb
    else
      modprobe btusb bdaddr_base="$BT_MAC"
    fi
  fi
}

stop()
{
  if is-bluez-platform; then
    rmmod btusb btmrvl_sdio btmrvl bluetooth hidp hid-gfrm uhid
    rmmod compat
  fi
  [ -e "$MODULE_PATH/wl.ko" ] && rmmod wl
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    stop
    start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac
