#!/bin/sh

. /etc/utils.sh

DELAY="$1"  # if empty, run only once

# Provide a more useful 'comm'-like value for our browser_shell. This takes care
# of two problems:
#   1. Distinguishing between the browser, renderer, etc.
#   2. Distinguishing between webapps.
format_chrome_comm()
{
  local pid="$1"
  local args="$2"

  local type_and_rest="${args#*--type=}"
  if test "$type_and_rest" = "$args"; then
    type_and_rest="browser"
  fi

  # Strip any arguments after the shell type off. For the GPU process, reduce
  # the type from 'gpu-process' to just 'gpu'.
  local shell_type="${type_and_rest%%[ -]*}"

  # Now we need the webapp. This is beautifully hacky; only the browser process
  # has an actual URL we can mine the webapp from, however the renderer and gpu
  # processes do have the browser pid as a parameter, so we can read that and
  # work backwards. For the zygote there's nothing we can do but it usually
  # isn't important.
  local web_app
  case "$shell_type" in
    browser)
      web_app=$(get_webapp_for_browser "$args")
      ;;
    renderer | gpu)
      web_app=$(get_webapp_for_channeled_process "$args")
      ;;
    *)
      web_app="unknown"
      ;;
  esac

  echo "${shell_type}_${web_app}"
}

# Given the command-line arguments for the Chromium browser process, extract the
# webapp if possible.
get_webapp_for_browser()
{
  local args="$1"
  local youtube_url="youtube.com"
  local oregano_url="oregano"
  local webapp="unknown"

  if test "${args#*$youtube_url}" != "$args"; then
    webapp="youtube"
  elif test "${args#*$oregano_url}" != "$args"; then
    webapp="oregano"
  fi

  echo "$webapp"
}

# Given the command-line arguments for a channeled Chromium process (e.g. the
# renderer or gpu), extract the webapp if possible. This does a lookup via the
# browser process.
get_webapp_for_channeled_process()
{
  local args="$1"
  local channel_and_rest="${args#*--channel=}"
  if test "$channel_and_rest" = "$args"; then
    channel_and_rest = ""
  fi

  # Strip the non-pid part of the channel and the rest of the args off.
  local browser_pid="${channel_and_rest%%.*}"

  if test "$browser_pid" = ""; then
    echo "unknown"
  else
    ps_output=$(ps --no-headers -o cmd "$browser_pid")
    echo $(get_webapp_for_browser "$ps_output")
  fi
}

printstat()
{
  local result="$1"
  shift

  "$@" | sort -rn | head -n 5 | (
    while read val pid comm arg0 arg1 rest; do
      [ "$comm" = "python" ] && comm=${arg1##/*/}  # use the .py script name
      [ "$comm" = "browser_shell" ] && \
          comm=$(format_chrome_comm "$pid" "$arg1 $rest")
      result="$result $comm($val)"
    done;
    echo "$result"
  )
}

freemem()
{
  free | (
    read header
    read h1 total junk
    read h2a h2b real_used real_free junk
    echo "$1 total=$total used=$real_used free=$real_free"
  )
}


buddyinfo()
{
  while read junk1 junk2 junk3 label data; do
    echo "$1 $label: $data"
  done </proc/buddyinfo
}


dfspace()
{
  df -k | {
    out=
    read header
    while read dev blocks used avail percent fs junk; do
      if [ "$used" != 0 ]; then
        out="$out$fs:$used "
      fi
    done
    echo "$1 $out"
  }
}


carriers()
{
  ip link show | {
    out=
    while IFS=': ' read n ifc flags smtu mtu sdisc disc smaster master sstate state junk; do
      if [ "$smtu $sdisc $smaster" = "mtu qdisc state" ]; then
        out="$out$ifc($master) "
      elif [ "$smtu $sdisc $sstate" = "mtu qdisc state" ]; then
        out="$out$ifc($state) "
      fi
    done
    echo "$1 $out"
  }
}


fdcount()
{
  local testopt="$2"
  ps ax -o pid=,comm= |
  while read pid comm junk; do
    for d in /proc/$pid/fd/*; do
      [ "$testopt" "$d" ] && echo "$comm"
    done
 done |
 sort |
 uniq -c |
 sort -nr |
 head -n10 | {
   out=
   while read count comm junk; do
     out="$out$comm($count) "
   done
   echo "$1 $out"
 }
}


ip_only()
{
  while read ip junk; do
    contains "$ip" ":" || echo "$ip" "$junk"
  done
}


ip6_only()
{
  while read ip junk; do
    contains "$ip" ":" && echo "$ip" "$junk"
  done
}


nameservers()
{
  grep '^nameserver' /etc/resolv.conf | while read ns ip junk; do
    echo "$ip"
  done
}


defaultroutes()
{
  ip "$@" route list | while read a b IP c IF d; do
    if [ "$a $b" = "default via" ]; then
      if startswith "$IP" "fe80:"; then
        # IPV6 link-local address, return IP and interface
        echo "$IP,$IF"
      else
        echo "$IP"
      fi
    fi
  done
}


do_ping()
{
  VER=$1
  IP=$2
  shift 2
  ping$VER -n -c1 -w5 "$@" $IP 2>&1 | {
    while read nbytes bytes from ip serial ttl time ms; do
      if [ "$bytes $from $ms" = "bytes from ms" ]; then
        echo "${time#time=}ms/${ttl#ttl=}ttl"
        exit
      fi
    done
    echo "ERR"
  }
}


pings()
{
  out=
  for ip in \
      127.0.0.1 \
      $(defaultroutes) \
      $(nameservers | ip_only) \
      gstatic.com
  do
    out="$out$ip($(do_ping "" $ip)) "
  done
  echo "$1 $out"
}


pings6()
{
  out=
  for ip_if in \
      ::1 \
      $(defaultroutes -6) \
      $(nameservers | ip6_only) \
      gstatic.com
  do
    out=$out$(echo "$ip_if" | while IFS=, read ip if; do
      if [ -n "$if" ]; then
        echo "$ip($(do_ping "6" $ip -I $if)) "
      else
        echo "$ip($(do_ping "6" $ip)) "
      fi
    done)
  done
  echo "$1 $out"
}


gstatics()
{
  gs=$(gstatic)
  rv=$?
  echo "$gs" | while read ip stat; do
    echo -n "$ip($stat) "
  done
  echo
  return $rv
}


wifistats()
{
  local phy="$1"
  local queuefile="/sys/kernel/debug/ieee80211/$phy/ath9k/queues"
  if [ -e "$queuefile" ]; then
    while read line; do
      echo "$phy: ath9k-queue: $line"
    done <$queuefile
  fi
}


if [ -n "$DELAY" ]; then
  # Stagger startup after a power outage
  sleep $(randint 1 "$DELAY")
fi

while :; do
  # time used by each process, followed by cumulative time (which includes
  # children, including already terminated ones).  Note that the 'cputime'
  # format doesn't work with --cumulative, so we need to use bsdtime instead.
  printstat "cputop:" ps --no-headers -e -o bsdtime,pid,comm,cmd
  printstat "ccputop:" ps --no-headers --cumulative -e -o bsdtime,pid,comm,cmd

  printstat "memtop:" ps --no-headers -e -o rss,pid,comm,cmd
  echo "loadavg: $(cat /proc/loadavg)"
  freemem "mem:"
  buddyinfo "buddyinfo:"
  dfspace "df:"
  carriers "carriers:"
  fdcount "fdcount:" -e
  fdcount "sockcount:" -S

  for phy in /sys/kernel/debug/ieee80211/phy*; do
    wifistats "$(basename "$phy")"
  done

  # these can cause network activity, so /tmp/disable_pings is a way to
  # stop it if it's getting annoying or causing trouble.
  if [ ! -e /tmp/disable_pings ]; then
    echo "gstatic: $(gstatics)"
    pings "ping:" "$gs_retval"
    pings6 "ping6:" "$gs_retval"
    runnable find-servers && echo "find-servers: $(find-servers)"
    if is-network-box || is-storage-box; then
      echo "dns: $(dnsck 8.8.8.8 8.8.4.4 2001:4860:4860::8888 2001:4860:4860::8844)"
    else
      echo "dns: $(dnsck)"
    fi
  fi

  if [ -e /proc/bcmdriver/debug ]; then
    echo core > /proc/bcmdriver/debug
  fi

  if [ -n "$DELAY" ]; then
    sleep "$DELAY" || exit 1
  else
    break
  fi
done
