#!/usr/bin/python
"""DNS service check.

Prints a one line summary of whether DNS servers are functioning.
Supports IPv4 and IPv6.

$ dnsck 2001:4860:4860::8888 2001:4860:4860::8844 8.8.8.8 8.8.4.4
2001:4860:4860::8888(OK),13.2ms 2001:4860:4860::8844(TIMEOUT),3000.0ms \
8.8.8.8(OK),13.7ms 8.8.4.4(OK),15.8ms
"""

import dns.resolver
import os
import re
import sys
import time

try:
  import monotime  # gpylint disable=unused-import,g-import-not-at-top
except ImportError:
  pass


RESOLV_CONF_EXTERNAL = '/tmp/resolv.conf.external'
EXTRA_NAMESERVER_FILE = '/tmp/dnsck_servers'


_time = getattr(time, 'monotime', time.time)


def GetDefaultNameservers():
  resolvconf = '/etc/resolv.conf'
  if os.path.exists(RESOLV_CONF_EXTERNAL):
    resolvconf = RESOLV_CONF_EXTERNAL
  s = dns.resolver.Resolver(filename=resolvconf, configure=True)
  return s.nameservers


def GetExtraNameservers():
  """Return contents of EXTRA_NAMESERVER_FILE as a list.

  EXTRA_NAMESERVER_FILE is expected to contain a comma-separated list
  of IP addresses.

  Returns:
    a list of IP addresses, or an empty list if the file does
    not exist.
  """
  try:
    with open(EXTRA_NAMESERVER_FILE) as f:
      line = f.read(8192).strip()
      ips = re.split(r'[\s,;]', line)
      return set(ips)
  except IOError:
    return set()


def DnsCheck(server, qname):
  """Resolve qname using server, return status."""
  s = dns.resolver.Resolver(configure=False)
  s.timeout = s.lifetime = 3  # in seconds
  s.nameservers.append(server)
  start = _time()
  result = 'UNKNOWN'
  try:
    answer = s.query(qname=qname)
    result = 'OK'
  except dns.exception.Timeout:
    result = 'TIMEOUT'
  except dns.exception.DNSException:
    result = 'DNSERR'
  end = _time()
  msec = '%.1fms' % ((end - start) * 1000)
  return '%s(%s),%s' % (server, result, msec)


def main():
  servers = set(GetDefaultNameservers())
  if (len(sys.argv) > 1):
    servers |= set(sys.argv[1:])
  servers |= GetExtraNameservers()
  output = []
  for server in servers:
    if server:
      output.append(DnsCheck(server, qname='gstatic.com'))
  print ' '.join(output)


if __name__ == '__main__':
  main()
