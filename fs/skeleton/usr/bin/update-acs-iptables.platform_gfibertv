#! /usr/bin/zsh

# Copyright 2014 Google Inc. All Rights Reserved.
#

# refreshes the rules in the acsrules chains based on acs settings

ip46tables()
{
  iptables $*
  ip6tables $*
}

# wan is wan0/wan0.2 on optimus/gfrg200
wan=$(activewan)
wans=wan0+

wanipv4=$(ip -4 -o addr show $wan)
wanipv4=${wanipv4#* inet }
wanipv4mask=${wanipv4%% *}
wanipv4=${wanipv4%%/*}

lanipv4=$(ip -4 -o addr show br0)
lanipv4=${lanipv4#* inet }
lanipv4mask=${lanipv4%% *}
lanipv4=${lanipv4%%/*}

wanipv6=$(ip -6 -o addr show $wan)
wanipv6=${wanipv6#* inet }
wanipv6mask=${wanipv6%% *}
wanipv6=${wanipv6%%/*}

lanipv6=$(ip -6 -o addr show br0)
lanipv6=${lanipv6#* inet6 }
lanipv6mask=${lanipv6%% *}
lanipv6=${lanipv6%%/*}

# presumes acsrules chains are created (by S39firewall)

acs=/tmp/acs

# clear out any existing rules
ip46tables -t filter -F acsrules-filter-forward
iptables -t nat -F acsrules-nat-prerouting
iptables -t nat -F acsrules-nat-postrouting

# ipv4 port mapping rules
file=/tmp/cwmp_iptables
if [ -f $file ]; then
  declare -A cwmp
  line=0
  while IFS="=" read -r key value; do
    line=$(($line + 1))
    if [ -z "$key" ]; then
      echo "$0: $file:$line: ignoring empty key" 1>&2
      continue
    fi
    cwmp[$key]="$value"
  done < $file

  rule=1
  while true; do
    tag="CWMP_${rule}_"

    comment=${cwmp[${tag}COMMENT]}
    protocol=${cwmp[${tag}PROTOCOL]}
    source=${cwmp[${tag}SOURCE]}
    gateway=${cwmp[${tag}GATEWAY]}
    dest=${cwmp[${tag}DEST]}
    sport=${cwmp[${tag}SPORT]}
    dport=${cwmp[${tag}DPORT]}
    enabled=${cwmp[${tag}ENABLE]}

    rule=$(($rule + 1))

    # 1 means proceed, 0 means skip, others mean abort
    if [ "$enabled" != 1 ]; then
      if [ "$enabled" != 0 ]; then
        # end of rules
        break
      fi
      # not enabled
      continue
    fi

    isrange=$((echo "$sport" | grep -q ":") && echo 1)
    if [ ! "$isrange" ]; then
      dportnat=":$dport"
    else
      if [ "$sport" != "$dport" ]; then
        echo "$0: $tag: source port range ($sport) does not match dest port range ($dport)" 1>&2
        continue
      fi
      dportnat=
    fi

    iptables -t nat -A acsrules-nat-prerouting -i "$wans" -p "$protocol" -s "$source" -d "$gateway" --dport "$sport" \
      -j DNAT --to "$dest$dportnat" -m comment --comment "$comment"
    iptables -t nat -A acsrules-nat-postrouting -p "$protocol" -s "$lanipv4mask" -d "$dest" --dport "$dport" \
      -j SNAT --to "$lanipv4"
    iptables -A acsrules-filter-forward -p "$protocol" -d "$dest" --dport "$dport" -j ACCEPT
    # this adds a lan rule so internal hosts can use the lan router ip to get the same mapping
    if ( [ "$gateway" = "$wanipv4" ] || [ "$gateway" = 0/0 ] ) && [ "$source" = 0/0 ]; then
      iptables -t nat -A acsrules-nat-prerouting -p "$protocol" -d "$lanipv4" --dport "$sport" \
        -j DNAT --to "$dest$dportnat"
    fi
  done
fi

# ipv6 port mapping rules
file=/tmp/cwmp_ip6tables
if [ -f $file ]; then
  declare -A cwmp6
  line=0
  while IFS="=" read -r key value; do
    line=$(($line + 1))
    if [ -z "$key" ]; then
      echo "$0: $file:$line: ignoring empty key" 1>&2
      continue
    fi
    cwmp6[$key]="$value"
  done < $file

  rule=1
  while true; do
    tag="CWMP_${rule}_"

    comment=${cwmp6[${tag}COMMENT]}
    protocol=${cwmp6[${tag}PROTOCOL]}
    source=${cwmp6[${tag}SOURCE]}
    dest=${cwmp6[${tag}DEST]}
    sport=${cwmp6[${tag}SPORT]}
    dport=${cwmp6[${tag}DPORT]}
    enabled=${cwmp6[${tag}ENABLE]}

    rule=$(($rule + 1))
    # 1 means proceed, 0 means skip, others mean abort
    if [ "$enabled" != 1 ]; then
      if [ "$enabled" != 0 ]; then
        # end of rules
        break
      fi
      # not enabled
      continue
    fi

    ip6tables -A acsrules-filter-forward -p "$protocol" -s "$source" -d "$dest" --sport "$sport" --dport "$dport" -j ACCEPT -m comment --comment "$comment"
  done
fi

# upnp IGD (firewall pinholes)
# MINIUPNPD is maintained by miniupnpd
if [ -f $acs/upnpd_enabled ]; then
  ip46tables -t filter -A acsrules-filter-forward -i $wans ! -o $wans -j MINIUPNPD
  iptables -t nat -A acsrules-nat-prerouting -d "$wanipv4" -i $wans -j MINIUPNPD
  ! /etc/init.d/S80upnpd isrunning && /etc/init.d/S80upnpd start
else
  /etc/init.d/S80upnpd isrunning && /etc/init.d/S80upnpd stop
fi

# ftp server
if [ -f $acs/ftpserverv4 ]; then
  ftpserverv4=$(cat $acs/ftpserverv4)
  iptables -t nat -A acsrules-nat-prerouting -p tcp ---dport 20 -j DNAT --to "$ftpserverv4":20
  iptables -t nat -A acsrules-nat-prerouting -p tcp --dport 21 -j DNAT --to "$ftpserverv4":21
  iptables -A acsrules-filter-forward -p tcp -d "$ftpserverv4" --dport 21 -m conntrack --ctstate NEW,ESTABLISHED ftp -j ACCEPT
  iptables -A acsrules-filter-forward -p tcp -d "$ftpserverv4" --dport 20 -m conntrack --ctstate RELATED -m helper --helper ftp -j ACCEPT
  iptables -A acsrules-filter-forward -p tcp -d "$ftpserverv4" --dport 1024: -m conntrack --ctstate RELATED -m helper --helper ftp -j ACCEPT
fi
if [ -f $acs/ftpserverv6 ]; then
  ftpserverv6=$(cat $acs/ftpserverv6)
  ip6tables -A acsrules-filter-forward -p tcp -d "$ftpserverv6" --dport 21 -m conntrack --ctstate NEW,ESTABLISHED ftp -j ACCEPT
  ip6tables -A acsrules-filter-forward -p tcp -d "$ftpserverv6" --dport 20 -m conntrack --ctstate RELATED -m helper --helper ftp -j ACCEPT
  ip6tables -A acsrules-filter-forward -p tcp -d "$ftpserverv6" --dport 1024: -m conntrack --ctstate RELATED -m helper --helper ftp -j ACCEPT
fi

# DMZ, goes last
if [ -f $acs/dmzhostv4 ]; then
  dmzhostv4=$(cat $acs/dmzhostv4)
  iptables -t nat -A acsrules-nat-prerouting -i $wan -s 0/0 -d "$wanipv4" -j DNAT --to "$dmzhostv4"
  iptables -A acsrules-filter-forward -i $wan -d "$dmzhostv4" -j ACCEPT
fi
if [ -f $acs/dmzhostv6 ]; then
  dmzhostv4=$(cat $acs/dmzhostv6)
  iptables -A acsrules-filter-forward -i $wan -d "$dmzhostv6" -j ACCEPT
fi

exit 0
