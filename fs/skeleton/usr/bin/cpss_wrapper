#! /bin/sh

. /etc/utils.sh

#
# reset and initialize the marvell parts in chimera
#

register_experiment CpssNoStart
register_experiment CpssNoInit
register_experiment Cpss10GOnly

die()
{
  echo "$0: $*" >&2
  pkill -x cpss
  exit 1
}

vlan_outofband=$(ptp-config -g vlan_outofband)
vlan_inband=$(ptp-config -g vlan_inband)
vlan_peer=$(ptp-config -g vlan_peer)

port_poe=0/0
port_soc=0/4
port_modem=0/24
port_sfp=0/25

src_modem=${port_modem##0/}
src_sfp=${port_sfp##0/}

# take switch out of reset in case it was left that way
if [ -e /dev/gpio/3236_reset ]; then
  echo 0 >/dev/gpio/3236_reset/value
fi

pci="/sys/bus/pci/devices/0000:01:00.0"
if [ ! -d $pci ]; then
  # rescan the pci bus in case it was in reset
  echo 1 >/sys/bus/pci/rescan
  msleep 200
fi

if [ ! -d $pci ]; then
  die "pci device '$pci' not found"
fi

vendor_id="$(cat ${pci}/vendor)"
device_id="$(cat ${pci}/device)"
if [ "$vendor_id" != "0x11ab" ] || [ "$device_id" != "0xf410" ]; then
  die "pci vendor_id (0x11ab != $vendor_id) or" \
      "device_id (0xf410 != $device_id) mismatch!"
fi

# Resetting the 3236 causes all the PCI BARs to be reset, so we need to remove
# the switch from the pci bus then rescan the pci bus at the end. Finally we
# need to enable the switch again.
echo 1 >$pci/remove
msleep 100
if [ ! -d $pci ]; then
  echo "$pci was removed successfully!"
else
  die "There is still a PCI device present after removal at: $pci"
fi

# If 3236_reset is available then the switch software reset line is available.
# Wait for 3236_ready to go high before starting cpss.
if [ -e /dev/gpio/3236_reset ]; then
  echo 1 >/dev/gpio/3236_reset/value
  msleep 100
  echo 0 >/dev/gpio/3236_reset/value
  bailout=0
  while [ ${bailout} -le 3 ]; do
    state=$(cat /dev/gpio/3236_ready/value)
    if [ ${state} -eq 1 ]; then
      echo "$0: 3236 is ready after reset!"
      break
    else
      bailout=$(($bailout+1))
      msleep 500
    fi
  done
  if [ ${bailout} -gt 3 ]; then
    die "Error: 3236 was NOT reset!"
  fi
fi

# reset phys
reset="2011_reset 3220_reset"
for n in $reset; do
  echo 1 >/dev/gpio/$n/value
done
msleep 100
for n in $reset; do
  echo 0 >/dev/gpio/$n/value
done

echo 1 >/sys/bus/pci/rescan
msleep 200
if [ ! -d $pci ]; then
  die "There is no PCI device at $pci after rescanning!"
else
  echo "Excellent! $pci has reappeared."
fi

echo "Finally, enabling the switch..."
echo 1 >$pci/enable

if experiment CpssNoStart; then
  echo "$0: experiment CpssNoStart is enabled, not starting cpss." >&2
  exit 0
fi

# start cpss as persistent server
pkill -x cpss
export CMDFS_ROOT=/usr/lib/cpss/scripts
ptyserver -p 4455 cpss -tty 2>&1 | logos cpss_pty &

# check that shell loaded and we get a prompt
# try a few times; we get one timeout at boot time, don't know why
success=0
for n in $(seq 3); do
  cpss_cmd <<EOF

EOF
  if [ $? = 0 ]; then
    success=1
    break
  fi
  echo "$0: still waiting for cpss prompt" >&2
  sleep 1
done
[ $success = 1 ] || die "no cpss prompt"
echo "$0: got cpss prompt"

# start configuring cpss
if experiment CpssNoInit; then
  echo "$0: experiment CpssNoInit enabled, skipping init and 2011 config." >&2
else

  # disable pager
  cpss_cmd <<EOF || die "failed to disable pager"
    debug
      set print pause disable
    end
EOF

  # init the switch, check for result
  cpss_cmd <<EOF | grep "Init system returned:0" || die "cpssInitSystem failed"
    cpssInitSystem 19,2,0
EOF

  # show cpss version
  echo show version | cpss_cmd

  # init 88x2011 (xfi/xaui transceiver)
  cpss_cmd <<EOF | grep "Successfully" || die "failed to initialize 2011"
    chimera
      init_2011
    end
EOF

  if experiment Cpss10GOnly; then
    echo "$0: experiment Cpss10GOnly is enabled, skipping vlans." >&2
    # configure just the 10G path
    cpss_cmd <<EOF || die "config failed"
      config
        interface range ethernet $port_modem,$port_sfp
          speed 10000 mode SR_LR
        exit
      end
EOF

  else
    # configure ports, vlans
    cpss_cmd <<EOF || die "config failed"
      config
        no counters mac counters reset-on-read all
        no interface range vlan device 0 vid 1
        interface range vlan device 0 vid 1-4095
        exit
        access-list device 0 pcl-ID 10
          rule-id 12 action permit source-port $src_sfp redirect-ethernet $port_modem
          rule-id 18 action permit source-port $src_modem redirect-ethernet $port_sfp
        exit
        interface ethernet $port_poe
          speed 1000 mode SGMII
          switchport allowed vlan add $vlan_outofband untagged
          switchport pvid $vlan_outofband
        exit
        interface ethernet $port_soc
          speed 1000 mode 1000Base_X
          switchport allowed vlan add $vlan_outofband tagged
          switchport allowed vlan add $vlan_peer tagged
          switchport allowed vlan add $vlan_inband tagged
          switchport pvid $vlan_outofband
        exit
        interface ethernet $port_modem
          speed 10000 mode SR_LR
          switchport allowed vlan add $vlan_peer tagged
          switchport allowed vlan add $vlan_inband tagged
          service-acl pcl-ID 10 lookup 0
        exit
        interface ethernet $port_sfp
          speed 10000 mode SR_LR
          switchport allowed vlan add $vlan_inband tagged
          service-acl pcl-ID 10 lookup 0
        end
      end
      cpss-api call cpssDxChBrgVlanEgressFilteringEnable dev 0 enable false
      chimera2 pcl_modify_action
EOF

  fi
fi

# wait on ptyserver
wait

# exit badly to get babysitter to restart
exit 1
