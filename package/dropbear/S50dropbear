#!/bin/sh
#
# Starts dropbear sshd.
#

start() {
	# Bail out before starting dropbear if the DEBUG file does not exist.
	[ -f /tmp/DEBUG ] || exit 0

	# On GFLT110 if this is not production, set an IP and allow password
	# login.
	allow_password_logins="no"
	if [ $(cat /etc/platform) = "GFLT110" -a ! `sysvar_cmd -g PRODUCTION_UNIT` ]; then
		ip addr add 192.168.10.11/24 dev eth0
		allow_password_logins="yes"
	fi

	# Make sure dropbear directory exists.
	#  /etc/dropbear links to /tmp/dropbear, which we can write to.
	if mkdir -p /config/dropbear; then
		ln -sf /config/dropbear /tmp
	else
		mkdir -p /tmp/dropbear
	fi

	# Check for the dropbear keys
	umask 077
	K1=/etc/dropbear/dropbear_rsa_host_key
	K2=/etc/dropbear/dropbear_dss_host_key
	if ! dropbearkey -y -f $K1 >/dev/null 2>&1; then
		[ -e "$K1" ] && echo "BUG: $K1 existed, but invalid!"
		rm -f $K1
		dropbearkey -t rsa -f $K1
	fi
	if ! dropbearkey -y -f $K2 >/dev/null 2>&1; then
		[ -e "$K2" ] && echo "BUG: $K2 existed, but invalid!"
		rm -f $K2
		dropbearkey -t dss -f $K2
	fi

	# If mfg console is allowed, then allow login by password.
        # But only from the local address.
	if [ $allow_password_logins = "yes" ]; then
		babysit 60 dropbear -p 192.168.10.11:22 -F &
	else
		babysit 60 dropbear -s -F &
	fi
}
stop() {
	# we could use pkill dropbear here, but then it would kill running
	# ssh sessions, which is not what we want.  So use the pidfile
	# instead.  But we do want to make sure the babysitter stays dead.
	pkillwait -f 'babysit [0-9]+ dropbear'
	start-stop-daemon -K -q -p /var/run/dropbear.pid
}
restart() {
	stop
	start
}

case "$1" in
	start)
		start
		;;
	stop)
		stop
		;;
	restart|reload)
		restart
		;;
	*)
		echo "Usage: $0 {start|stop|restart}"
		exit 1
esac
