#!/bin/sh
#
#   Buffet service is a system daemon responsible for command dispatch and
# device state publishing on local and GCD cloud channels.
#
#   Note: Buffet is ported from ChromeOS as a binary so it expects the ChromeOS
# environment. Therefore, chroot is needed to execute buffet.
#

# mount_once is used to only mount a given mountpoint once.
# If the given folder is already mounted, this won't do anything,
# even if the underlying filesystem is different.
# The first parameter is the filesystem to mount, the second parameter is the mountpoint.
#
# example: mount_once "/dev" "/chroot/chromeos/dev"
mount_once() {
  if ! mount | grep -q "\ $2\ " ; then
    mount -o bind $1 $2
  fi
}

# Bind chroot directories to tmpfs, as chroot may exist in a read-only
# filesystem. These directories are used for the DBus socket and Buffet
# libraries.
mkdir -p "/config/buffet"
mkdir -p "/config/shared/lib/buffet"
[ -e "/config/buffet/lib" ] || ln -s "/config/shared/lib/buffet" "/config/buffet/lib"

mount_once "/tmp/run" "/chroot/chromeos/var/run"
mount_once "/config/shared/lib" "/chroot/chromeos/var/lib"
mount_once "/etc" "/chroot/chromeos/etc"
mount_once "/tmp" "/chroot/chromeos/tmp"

# Sanity check
[ -x /chroot/chromeos/bin/buffet ] || exit 1
[ -d /chroot/chromeos/etc/buffet ] || exit 1

# Create necessary directories and dependencies to run Buffet.
mkdir -p /chroot/chromeos/var/run/buffet
mkdir -p /chroot/chromeos/etc/ssl/certs

# Sanity check: DBus socket has to be present.
wait-until-created /chroot/chromeos/var/run/dbus/system_bus_socket

start() {
  echo "Starting buffet service..."
  babysit 10 chroot /chroot/chromeos /bin/buffet 2>&1 | logos buffet &
  [ $? -ne 0 ] && echo "Failed to start buffet..." && exit 1
  echo "Buffet started successfully"
}

stop() {
  echo "Stopping buffet..."
  pkill -x buffet
  [ $? -ne 0 ] && echo "Failed to stop buffet..." && exit 1
  echo "Buffet stopped successfully"
}

restart() {
  stop
  start
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|reload)
    restart
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac
